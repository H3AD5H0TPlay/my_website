---
import { translations } from '../utils/translations';
const menuItems = [
  { href: '#about', text: translations.about.title },
  { href: '#experience', text: translations.experience.title },
  { href: '#skills', text: translations.skills.title },
  { href: '#projects', text: translations.projects.title },
  { href: '#contact', text: translations.contact.title }
];
---

<div class="md:hidden">
  <button
    id="menu-toggle"
    class="fixed top-4 right-4 p-2 text-cyber-red hover:text-cyber-red-bright transition-all duration-300 hover:scale-105 z-[70]"
    aria-label="Toggle Menu"
    aria-expanded="false"
    aria-controls="mobile-menu"
  >
    <div class="menu-icon w-6 h-6 relative">
      <span class="menu-line absolute h-0.5 w-full bg-current transform transition-all duration-300 origin-center top-0 left-0"></span>
      <span class="menu-line absolute h-0.5 w-full bg-current transform transition-all duration-300 origin-center top-[10px] left-0"></span>
      <span class="menu-line absolute h-0.5 w-full bg-current transform transition-all duration-300 origin-center top-[20px] left-0"></span>
    </div>
  </button>

  <nav
    id="mobile-menu"
    class="fixed inset-0 z-[60] transform translate-x-full transition-all duration-500 ease-out"
  >
    <!-- Background layers -->
    <div class="absolute inset-0 bg-black/95"></div>
    <div class="absolute inset-0 backdrop-blur-xl"></div>
    <div class="absolute inset-0 bg-gradient-to-br from-cyber-red/10 via-transparent to-cyber-red/5"></div>
    
  <div class="relative z-10 h-full flex flex-col pt-20 px-8">
      <!-- Unified liquid glass menu panel -->
      <div class="relative w-full mt-8 rounded-2xl bg-black/40 backdrop-blur-md overflow-hidden">
        <!-- Liquid glass effects -->
        <div class="absolute inset-0 bg-gradient-to-br from-cyber-red/20 to-transparent"></div>
        <div class="absolute -inset-[150%] bg-gradient-to-br from-cyber-red/5 via-transparent to-cyber-red/10 animate-slow-spin"></div>
        
        <!-- Menu items -->
        <ul class="relative z-10 w-full p-4">
          {menuItems.map((item, index) => (
            <li class="menu-list-item mb-6 last:mb-0">
              <a
                href={item.href}
                class="block text-2xl font-cyber text-white hover:text-cyber-red transition-all duration-300 relative group opacity-0 translate-x-8"
                style={`transition-delay: ${index * 100}ms;`}
              >
                <div class="px-6 py-3 relative group-hover:bg-black/20 rounded-xl transition-all duration-300">
                  <span class="relative z-10 flex items-center">
                    <span class="text-cyber-red mr-3 opacity-0 group-hover:opacity-100 transition-all duration-300 transform -translate-x-2 group-hover:translate-x-0">&gt;</span>
                    {item.text}
                  </span>
                </div>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </nav>
  <!-- Safelist Tailwind classes used via JS -->
  <span class="hidden opacity-100 translate-x-0"></span>
</div>

<style>
  .menu-icon .menu-line {
    transition: transform 0.3s ease, opacity 0.3s ease, width 0.3s ease;
  }
  
  .menu-icon.active .menu-line:first-child {
    transform: rotate(45deg) translateY(13px);
  }
  
  .menu-icon.active .menu-line:nth-child(2) {
    opacity: 0;
    transform: translateX(-10px);
  }
  
  .menu-icon.active .menu-line:last-child {
    transform: rotate(-45deg) translateY(-13px);
  }

  /* Reveal menu items when menu is open */
  #mobile-menu:not(.translate-x-full) .menu-list-item a {
    opacity: 1 !important;
    transform: translateX(0) !important;
  }

  @keyframes slow-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .animate-slow-spin {
    animation: slow-spin 20s linear infinite;
  }
</style>

<script>
  (function initMobileMenu() {
    const setup = () => {
      const menuToggle = document.getElementById('menu-toggle');
      const menuIcon = menuToggle?.querySelector('.menu-icon');
      const mobileMenu = document.getElementById('mobile-menu');
  const menuLinks = mobileMenu?.querySelectorAll('a');

      if (!menuToggle || !mobileMenu) return; // Nothing to wire up

      let isAnimating = false;

      /** @param {boolean} visible */
      function showLinks() {
        if (!menuLinks) return;
        menuLinks.forEach((link) => {
          link.classList.remove('opacity-0', 'translate-x-8');
          link.classList.add('opacity-100', 'translate-x-0');
        });
      }

      function hideLinks() {
        if (!menuLinks) return;
        menuLinks.forEach((link) => {
          link.classList.add('opacity-0', 'translate-x-8');
          link.classList.remove('opacity-100', 'translate-x-0');
        });
      }

      function toggleMenu() {
        if (isAnimating || !mobileMenu || !menuToggle) return;
        isAnimating = true;

        const isOpening = mobileMenu.classList.contains('translate-x-full');

        if (isOpening) {
          menuIcon?.classList.add('active');
          setTimeout(() => {
            mobileMenu.classList.remove('translate-x-full');
            document.body.classList.add('overflow-hidden');
            menuToggle.setAttribute('aria-expanded', 'true');
            // Ensure links become visible
            showLinks();
          }, 50);
        } else {
          mobileMenu.classList.add('translate-x-full');
          document.body.classList.remove('overflow-hidden');
          setTimeout(() => {
            menuIcon?.classList.remove('active');
          }, 300);
          menuToggle.setAttribute('aria-expanded', 'false');
          // Hide links for next open
          hideLinks();
        }

        setTimeout(() => {
          isAnimating = false;
        }, 500);
      }

      menuToggle.addEventListener('click', toggleMenu);
      menuLinks?.forEach(link => {
        link.addEventListener('click', toggleMenu);
      });

      // Close on Escape for accessibility
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('translate-x-full')) {
          toggleMenu();
        }
      });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setup);
    } else {
      setup();
    }
  })();
</script>